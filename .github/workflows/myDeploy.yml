name : Real Last Nest Build # 현재 제목

on : # 이벤트를 등록
  push : # 푸쉬 이벤트가 발생하면 (pull request, 등등 원하는 이벤트를 넣어줄 수 있음)
    branches : # branches 입력한 브랜치에 이벤트가 일어났을 때 작업을 동작시킨다.
      - main

# on : [push] => 브랜치 상관 없이 푸쉬 이벤트가 발생 하면 진행
# uses : 외부 라이브러리 사용

jobs : # 작업의 단위
  bulid : # 식별자 이름 (이건 정해져 있지 않음, 그냥 식별자 이름임)
    runs-on : ubuntu-latest # 러너에서 사용할 OS 결정, latest : 최신 버전이라는 뜻

    steps : # 작업의 가장 작은 단위
      - name : checkout # 개발자가 어떤 작업인지 쉽게 알게 하기 위한 식별자 이름, 작업의 작은 단위의 이름
        uses : actions/checkout@v4 # 라이브러리, 레포지토리를 체크아웃 할 수 있게 도와주는 라이브러리
        # 브랜치에 있는 내용을 클론(복사)해온다. 워크 플로우에 복사해온다.

      - name : set up node # uses 라이브러리를 사용할 것을 가져오고, with는 라이브러리의 속성 설정값
        uses : actions/setup-node@v4 # 노드 버전을 가져온다.
        with :
          node-version : '20' # 20 버전의 노드 런타임 환경을 제공한다.

      - name : test # 의존성을 설치하기전에 폴더 구조 확인, pwd : 현재 작업 환경의 경로 ex) C://MH/AWS/20240717/myapp/.github/workflows
        run  : |
          ls
          pwd

      - name : npm install # package.json이 있으면 다운 받을 수 있음 / 의존성 설치
        run  : npm install

      - name : build nestjs # 빌드
        run  : npm run build

      - name : build test # 빌드 파일 확인
        run  : |
          ls
          pwd
          cd dist
          ls
          pwd

      # 러너에 빌드된 파일과 의존성들이 있는 상태 빌드 서버
      # 운영 배포 서버에 전송 해줘야 한다.

      - name : upload build
        uses : actions/upload-artifact@v4 # 빌드 결과물 저장, 빌드된 바이너리 패키지
        with :
          name : build-artifacts
          path : | # path : 아티팩트에 저장할 폴더나 파일들의 경로
            dist/
            package.json
            package-lock.json

      # 운영 서버에 전송 EC2에 파일을 전송
      # ssh 
      - name : ssh 접근할 키 파일 생성
        run  : | # .ssh 폴더가 있어도 에러를 발생 시키지 않는다. 부모 디렉터리 생성 -p : parents의 약어
          mkdir -p ~/.ssh
          ls
          pwd